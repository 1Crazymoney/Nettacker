# this section doesn't matter
info:
  id: whatever
  name: x
  author: y
  severity: z
  description: gg
  reference: oo
  tags:
    - zx
    - zz

# this section matters
payloads:
  # type of connection is lib requests (http(s) in python)
  - library: http
    # if true; python will start lib = requests.session()  otherwise lib = requests
    session: false
    verify: false # todo: must be designed later
    timeout: 1 # todo: must be designed later
    cert: '' # todo: design later
    stream: false # todo: design later
    proxies: '' # todo: design later
    # step design to do multiple actions test in the same or seperate session. e.g upload a file first and then check if its exist
    # or any other use.
    # all steps can have loops by entering yaml array or file input. e.g.
    #  url:
    #     - "{{BaseURL}}/install/"
    #     - "{{BaseURL}}/install2/"
    # or
    # url = read_list_from_file('path/filename.ext')
    # variables like BaseURL and more functionality should be design as well, or maybe even encoders?
    steps:
      # methods must be exact name as http verbs used in requests library. GET, OPTIONS, HEAD, POST, PUT, PATCH, or DELETE.
      # requests.get(), requests.post(), equests.put() etc...
      # - method: get
      #   # parameters like url, headers, cookies, etc are named based on requests input https://docs.python-requests.org/en/master/api/#requests.request
      #   url:
      #     - "{BaseURL}/install/"
      #     - "{BaseURL}/install2/"
      #   headers:
      #     Accept-Encoding: deflate
      #     fuzz:
      #       - 1
      #       - 2
      #       - 3
        # at the end python will call library.http_verb(url=url, headers=headers)
        # in this case
        # library.get(url='https://www.google.com/install/', headers={{'Accept-Encoding': 'deflate', 'fuzz': '1'}})
        # library.get(url='https://www.google.com/install/', headers={{'Accept-Encoding': 'deflate', 'fuzz': '2'}})
        # library.get(url='https://www.google.com/install/', headers={{'Accept-Encoding': 'deflate', 'fuzz': '3'}})
        # library.get(url='https://www.google.com/install2/', headers={{'Accept-Encoding': 'deflate', 'fuzz': '1'}})
        # library.get(url='https://www.google.com/install2/', headers={{'Accept-Encoding': 'deflate', 'fuzz': '2'}})
        # library.get(url='https://www.google.com/install2/', headers={{'Accept-Encoding': 'deflate', 'fuzz': '3'}})
      - method: get
        url:
          nettacker_fuzzer:
            input_format: '{{urls}}'
            prefix:
            suffix:
            interceptors:
            data:
              urls:
                - "{BaseURL}/install3/"
                - "{BaseURL}/install4/"

        auth:
          nettacker_fuzzer:
            input_format: '["{{username}}", "{{password}}"]'
            prefix: ''
            suffix: ''
            interceptors: json.loads,tuple,value_to_class
            data:
              username:
                - admin
                - user1
              password:
                - password123
                - abc123
        response:
          condition_type: and
          conditions:
            status_code:
              regex: 200
              reverse: true
            content: # not found should not be in the content
              regex: not found
              reverse: false



      - method: post
        url:
          nettacker_fuzzer:
              input_format: '{{urls}}'
              prefix:
              suffix:
              interceptors:
              data:
                urls:
                  - "{BaseURL}/install5/"
                  - "{BaseURL}/install6/"
        headers:
          Accept-Encoding: deflate
          fuzz:
            nettacker_fuzzer:
              input_format: '{{fuzz_data}}'
              prefix:
              suffix:
              interceptors:
              data:
                fuzz_data:
                  - 1
                  - 2
                  - 3
                  - 4
          user_agent:
            nettacker_fuzzer:
              input_format: '{{user_agents}}'
              prefix:
              suffix:
              interceptors:
              data:
                user_agents: fuzzer_function_read_file_as_array('user_agents.txt')
          x-secret:
            nettacker_fuzzer:
              input_format: '{{secrets}}'
              prefix:
              suffix:
              interceptors:
              data:
                secrets:
                  - "n1"
                  - "n2"
          Authorization:
            nettacker_fuzzer:
              input_format: "{{username}}:{{password}}"
              interceptors: string_to_bytes,binascii.b2a_base64,bytes.decode,str.strip
              prefix: 'Basic '
              suffix:
              data:
                username:
                  - admin
                  - test
                password:
                  - 12345
                  - admin123
        response:
          condition_type: or
          conditions:
            reason:
              regex: ok
              reverse: false
            status_code:
              regex: 200
              reverse: false
            content:
              regex: not found
              reverse: true
            headers:
              Set-Cookie:
                regex: admin
                reverse: false
            responsetime:  ">= 0.2" # 200 ms


      # # todo: design response, include content, status, raw, etc plus and/or condition and regex
